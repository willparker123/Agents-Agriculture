// Date: 07/02/2013 22:09:07
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package agentsmod;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelWhale extends ModelBase
{
  //fields
    ModelRenderer Body1;
    ModelRenderer Head1;
    ModelRenderer Head2;
    ModelRenderer LeftFin1;
    ModelRenderer RightFin1;
    ModelRenderer Tail1;
    ModelRenderer Tail2;
    ModelRenderer Tail3;
    ModelRenderer Tail4;
    ModelRenderer BackFin1;
  
    protected float field_78151_h = 4.0F;
    
    public ModelWhale()
    {
      textureWidth = 2000;
      textureHeight = 2000;
      
        Body1 = new ModelRenderer(this, 1000, -1);
        Body1.addBox(-70F, -120F, -130F, 80, 90, 140);
        Body1.setRotationPoint(31F, 50F, 59F);
        Body1.setTextureSize(64, 32);
        Body1.mirror = true;
        setRotation(Body1, 0F, 0F, 0F);
        Head1 = new ModelRenderer(this, 1000, 240);
        Head1.addBox(-70F, -120F, -200F, 80, 45, 140);
        Head1.setRotationPoint(31F, 52F, -11F);
        Head1.setTextureSize(64, 32);
        Head1.mirror = true;
        setRotation(Head1, -0.0371786F, 0F, 0F);
        Head2 = new ModelRenderer(this, 1000, 435);
        Head2.addBox(-70F, -121F, -130F, 74, 44, 150);
        Head2.setRotationPoint(34F, 86F, -114F);
        Head2.setTextureSize(64, 32);
        Head2.mirror = true;
        setRotation(Head2, -0.3665191F, 0F, 0F);
        LeftFin1 = new ModelRenderer(this, 1000, 750);
        LeftFin1.addBox(0F, 0F, 0F, 60, 16, 24);
        LeftFin1.setRotationPoint(42F, -50F, -40F);
        LeftFin1.setTextureSize(64, 32);
        LeftFin1.mirror = true;
        setRotation(LeftFin1, 0.5235988F, -0.8726646F, 0.3490659F);
        RightFin1 = new ModelRenderer(this, 1000, 650);
        RightFin1.addBox(0F, 0F, 0F, 60, 16, 24);
        RightFin1.setRotationPoint(-72F, -40F, 10F);
        RightFin1.setTextureSize(64, 32);
        RightFin1.mirror = true;
        setRotation(RightFin1, -0.5235988F, 0.8726646F, -0.3490659F);
        Tail1 = new ModelRenderer(this, 0, -1);
        Tail1.addBox(-36F, 0F, 0F, 72, 75, 70);
        Tail1.setRotationPoint(0F, -68F, 69F);
        Tail1.setTextureSize(64, 32);
        Tail1.mirror = true;
        setRotation(Tail1, 0F, 0F, 0F);
        Tail2 = new ModelRenderer(this, 0, -1);
        Tail2.addBox(-30F, 2F, 70F, 64, 60, 70);
        Tail2.setRotationPoint(0F, -68F, 69F);
        Tail2.setTextureSize(64, 32);
        Tail2.mirror = true;
        setRotation(Tail2, 0F, -0.0174533F, 0F);
        Tail3 = new ModelRenderer(this, 0, -1);
        Tail3.addBox(-28F, 4F, 140F, 56, 45, 60);
        Tail3.setRotationPoint(0F, -68F, 69F);
        Tail3.setTextureSize(64, 32);
        Tail3.mirror = true;
        setRotation(Tail3, 0F, 0F, 0F);
        Tail4 = new ModelRenderer(this, 0, -1);
        Tail4.addBox(-24F, 6F, 200F, 48, 35, 50);
        Tail4.setRotationPoint(0F, -68F, 69F);
        Tail4.setTextureSize(64, 32);
        Tail4.mirror = true;
        setRotation(Tail4, 0F, 0F, 0F);
        BackFin1 = new ModelRenderer(this, 1000, 1000);
        BackFin1.addBox(-45F, 8F, 250F, 90, 25, 60);
        BackFin1.setRotationPoint(0F, -68F, 69F);
        BackFin1.setTextureSize(64, 32);
        BackFin1.mirror = true;
        setRotation(BackFin1, 0F, 0F, 0F);
    }
  
  public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7){
		super.render(par1Entity, par2, par3, par4, par5, par6, par7);
		setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
		Body1.render(par7);
	    Head1.render(par7);
	    Head2.render(par7);
	    LeftFin1.render(par7);
	    RightFin1.render(par7);
	    Tail1.render(par7);
	    Tail2.render(par7);
	    Tail3.render(par7);
	    Tail4.render(par7);
	    BackFin1.render(par7);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  

  /**
   * Sets the model's various rotation angles. For bipeds, par1 and par2 are used for animating the movement of arms
   * and legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how
   * "far" arms and legs can swing at most.
   */
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
      float f6 = (30F / (float)Math.PI);
      this.Tail1.rotateAngleX = MathHelper.cos(par1 * 0.8F) * 0.1F * par2;
      this.Tail2.rotateAngleX = MathHelper.cos(par1 * 0.8F) * 0.15F * par2;
      this.Tail3.rotateAngleX = MathHelper.cos(par1 * 0.8F) * 0.2F * par2;
      this.Tail4.rotateAngleX = MathHelper.cos(par1 * 0.8F) * 0.25F * par2;
      this.BackFin1.rotateAngleX = MathHelper.cos(0.1F * 0.8F) * 0.3F * par2;
      //super.setRotationAngles(par1, par2, par3, par4, par5, par6, par7Entity);

//2nd number is how far it rotates
  }
}
